<?php

namespace Novatech\StockBundle\Repository;

/**
 * FatureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FatureRepository extends \Doctrine\ORM\EntityRepository
{
	public function getLastId()
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('f.id')
            ->from ('StockBundle:Facture','f')
            ->orderBy('f.id',"DESC")
            ->setMaxResults(1)
		    ;
		return $query->getQuery()->getResult();
    }

    public function allVenteByUser($idUser)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('f')
            ->from ('StockBundle:Facture','f')
            ->innerJoin('f.user', 'u')
            ->where('u.id = :id')
            ->setParameter('id',$idUser)
            ->orderBy('f.id',"DESC")
		    ;
		return $query->getQuery()->getResult();
    }

    public function getAllDevis()
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('f')
            ->from ('StockBundle:Facture','f')
            ->where('f.statut = 3')
            ->orderBy('f.id', "DESC")
        ;

        return $query
            ->getQuery()
            ->getResult()
            ;
    }

    public function allVenteByUserByDay($idUser)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('count(f) as nombre')
            ->from ('StockBundle:Facture','f')
            ->innerJoin('f.user', 'u')
            ->where('u.id = :id and f.dateOperationFacture = :date and f.statut = 1')
            ->setParameter('id',$idUser)
            ->setParameter('date',new \Datetime(date('d-m-Y')))
            ->orderBy('f.id',"DESC")
		    ;
		return $query->getQuery()->getResult();
    }

    public function allVenteByDay()
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('count(f) as nombre')
            ->from ('StockBundle:Facture','f')
            ->innerJoin('f.user', 'u')
            ->where('f.dateOperationFacture = :date and f.statut = 1')
            ->setParameter('date',new \Datetime(date('d-m-Y')))
            ->orderBy('f.id',"DESC")
		    ;
		return $query->getQuery()->getResult();
    }


    public function allVente()
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('count(f) as nombre')
            ->from ('StockBundle:Facture','f')
            ->innerJoin('f.user', 'u')
            ->where('f.statut = 1')
            ->orderBy('f.id',"DESC")
		    ;
		return $query->getQuery()->getResult();
    }

    public function allNombreProduitVendu($user)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('count(a) as nombre')
            ->from ('StockBundle:Achat','a')
            ->innerJoin('a.facture', 'f')
            ->innerJoin('f.user', 'u')
            ->where('u.id = :id and f.dateOperationFacture = :date and f.statut = 1')
            ->setParameter('id',$user)
            ->setParameter('date',new \Datetime(date('d-m-Y')))
            ->orderBy('f.id',"DESC")
		    ;
		return $query->getQuery()->getResult();
    }

    public function allNombreProduitVendus()
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('count(a) as nombre')
            ->from ('StockBundle:Achat','a')
            ->innerJoin('a.facture', 'f')
            ->where('f.dateOperationFacture = :date and f.statut = 1')
            ->setParameter('date',new \Datetime(date('d-m-Y')))
            ->orderBy('f.id',"DESC")
		    ;
		return $query->getQuery()->getResult();
    }


    public function allVenteProduit($user)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('f')
            ->from ('StockBundle:Facture','f')
            ->innerJoin('f.user', 'u')
            ->where('u.id = :id and f.dateOperationFacture = :date and f.statut = 1')
            ->setParameter('id',$user)
            ->setParameter('date',new \Datetime(date('d-m-Y')))
            ->orderBy('f.id',"DESC")
		    ;
		return $query->getQuery()->getResult();
    }

    public function allVenteProduits()
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('f')
            ->from ('StockBundle:Facture','f')
            ->innerJoin('f.user', 'u')
            ->where('f.dateOperationFacture = :date and f.statut = 1')
            ->setParameter('date',new \Datetime(date('d-m-Y')))
            ->orderBy('f.id',"DESC")
		    ;
		return $query->getQuery()->getResult();
    }

    public function getAllVenteResume($dateFrom, $dateTo)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('f')
            ->from ('StockBundle:Facture','f')
            ->where('f.statut = 1')
            ->orderBy('f.id',"DESC")
           
        ;

         if ($dateFrom) {
            $query->andwhere('f.dateOperationFacture >= :dateFrom ');
            $query->setParameter('dateFrom', $dateFrom);
        }

        if ($dateTo) {
            $query->andwhere('f.dateOperationFacture <= :dateTo ');
            $query->setParameter('dateTo', $dateTo);
        }
        return $query->getQuery()->getResult();
    }


    public function getAllVenteResumeByUser($dateFrom, $dateTo, $user)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('f')
            ->from ('StockBundle:Facture','f')
            ->innerJoin('f.user', 'u')
            ->where('f.statut = 1')
            ->orderBy('f.id',"DESC")
           
        ;

         if ($dateFrom) {
            $query->andwhere('f.dateOperationFacture >= :dateFrom ');
            $query->setParameter('dateFrom', $dateFrom);
        }

        if ($dateTo) {
            $query->andwhere('f.dateOperationFacture <= :dateTo ');
            $query->setParameter('dateTo', $dateTo);
        }
        if ($user) {
            $query->andwhere('u.id = :user');
            $query->setParameter('user', $user);
        }
        return $query->getQuery()->getResult();
    }
 
}
