<?php

namespace Novatech\StockBundle\Repository;

/**
 * FatureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FatureRepository extends \Doctrine\ORM\EntityRepository
{
    public function getLastId()
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('f.id')
            ->from ('StockBundle:Facture','f')
            ->orderBy('f.id',"DESC")
            ->setMaxResults(1)
        ;
        return $query->getQuery()->getResult();
    }

    public function allVenteByUser($idUser)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('f')
            ->from ('StockBundle:Facture','f')
            ->innerJoin('f.user', 'u')
            ->where('u.id = :id')
            ->setParameter('id',$idUser)
            ->orderBy('f.id',"DESC")
        ;
        return $query->getQuery()->getResult();
    }

    public function allVenteByUserAndTypeVersement($idUser, $statu)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('f')
            ->from ('StockBundle:Facture','f')
            ->innerJoin('f.user', 'u')
            ->where('u.id = :id' and 'f.typeReglementFacture = :typergment')
            ->setParameter('id',$idUser)
            ->setParameter('typergment',$statu)
            ->orderBy('f.id',"DESC")
        ;
        return $query->getQuery()->getResult();
    }

    public function allVenteByTypeVersement($statu)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('f')
            ->from ('StockBundle:Facture','f')
            ->where('f.typeReglementFacture = :typergment')
            ->setParameter('typergment',$statu)
            ->orderBy('f.id',"DESC")
        ;
        return $query->getQuery()->getResult();
    }

    public function getAllDevis()
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('f')
            ->from ('StockBundle:Facture','f')
            ->where('f.statut = 3')
            ->orderBy('f.id', "DESC")
        ;

        return $query
            ->getQuery()
            ->getResult()
            ;
    }

    public function allVenteByUserByDay($idUser)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('count(f) as nombre')
            ->from ('StockBundle:Facture','f')
            ->innerJoin('f.user', 'u')
            ->where('u.id = :id and f.dateOperationFacture = :date and f.statut = 1')
            ->setParameter('id',$idUser)
            ->setParameter('date',new \Datetime(date('d-m-Y')))
            ->orderBy('f.id',"DESC")
        ;
        return $query->getQuery()->getResult();
    }

    public function allVenteByDay()
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('count(f) as nombre')
            ->from ('StockBundle:Facture','f')
            ->innerJoin('f.user', 'u')
            ->where('f.dateOperationFacture = :date and f.statut = 1')
            ->setParameter('date',new \Datetime(date('d-m-Y')))
            ->orderBy('f.id',"DESC")
        ;
        return $query->getQuery()->getResult();
    }


    public function allVente()
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('count(f) as nombre')
            ->from ('StockBundle:Facture','f')
            ->innerJoin('f.user', 'u')
            ->where('f.statut = 1')
            ->orderBy('f.id',"DESC")
        ;
        return $query->getQuery()->getResult();
    }

    public function allNombreProduitVendu($user)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('count(a) as nombre')
            ->from ('StockBundle:Achat','a')
            ->innerJoin('a.facture', 'f')
            ->innerJoin('f.user', 'u')
            ->where('u.id = :id and f.dateOperationFacture = :date and f.statut = 1')
            ->setParameter('id',$user)
            ->setParameter('date',new \Datetime(date('d-m-Y')))
            ->orderBy('f.id',"DESC")
        ;
        return $query->getQuery()->getResult();
    }

    public function allNombreProduitVendus()
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('count(a) as nombre')
            ->from ('StockBundle:Achat','a')
            ->innerJoin('a.facture', 'f')
            ->where('f.dateOperationFacture = :date and f.statut = 1')
            ->setParameter('date',new \Datetime(date('d-m-Y')))
            ->orderBy('f.id',"DESC")
        ;
        return $query->getQuery()->getResult();
    }


    public function allVenteProduit($user)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('f')
            ->from ('StockBundle:Facture','f')
            ->innerJoin('f.user', 'u')
            ->where('u.id = :id and f.dateOperationFacture = :date and f.statut = 1')
            ->setParameter('id',$user)
            ->setParameter('date',new \Datetime(date('d-m-Y')))
            ->orderBy('f.id',"DESC")
        ;
        return $query->getQuery()->getResult();
    }

    public function allCreditVenteProduit($user)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('f')
            ->from ('StockBundle:Facture','f')
            ->innerJoin('f.user', 'u')
            ->where('u.id = :id and f.dateOperationFacture = :date and (f.statut = 1 or f.statut = 0)')
            ->setParameter('id',$user)
            ->setParameter('date',new \Datetime(date('d-m-Y')))
            ->orderBy('f.id',"DESC")
        ;
        return $query->getQuery()->getResult();
    }

    public function allVenteProduits()
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('f')
            ->from ('StockBundle:Facture','f')
            ->innerJoin('f.user', 'u')
            ->where('f.dateOperationFacture = :date and f.statut = 1')
            ->setParameter('date',new \Datetime(date('d-m-Y')))
            ->orderBy('f.id',"DESC")
        ;
        return $query->getQuery()->getResult();
    }

    public function allCreditVenteProduits()
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('f')
            ->from ('StockBundle:Facture','f')
            ->innerJoin('f.user', 'u')
            ->where('f.dateOperationFacture = :date and (f.statut = 1 or f.statut = 0)')
            ->setParameter('date',new \Datetime(date('d-m-Y')))
            ->orderBy('f.id',"DESC")
        ;
        return $query->getQuery()->getResult();
    }


    public function getAllVenteResume($dateFrom, $dateTo)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('a.quantiteAchat as produit', 'p.nomProduit', 'c.nomClient', 'f.referenceFacture', 'f.statut', 'f.statutVersement', 'u.nom', 'u.prenom', 'f.typeReglementFacture','f.dateOperationFacture as dateOp')
            ->from ('StockBundle:Achat','a')
            ->leftJoin('a.facture', 'f')
            ->leftJoin('a.stock', 's')
            ->leftJoin('s.produit', 'p')
            ->leftJoin('f.client', 'c')
            ->leftJoin('f.user', 'u')
            ->where('f.statut = 0 or f.statut = 1')
            ->andwhere('f.dateOperationFacture >= :dateFrom ')
            ->andwhere('f.dateOperationFacture <= :dateTo ')
            //->groupBy('f.id')
            ->orderBy('p.id',"DESC")
            ->setParameter('dateTo', new \DateTime($dateTo))
            ->setParameter('dateFrom', new \DateTime($dateFrom))

        ;

        return $query->getQuery()->getResult();
    }

    public function getAllVenteProduitResume($produit, $dateFrom, $dateTo)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('f.id', 'f.referenceFacture', 'f.dateFacture')
            ->from ('StockBundle:Achat','a')
            ->innerJoin('a.facture', 'f')
            ->innerJoin('a.stock', 's')
            ->innerJoin('s.produit', 'p')
            ->where('f.statut = 1')
            ->orderBy('f.id',"DESC")

        ;

        if ($dateFrom) {
            $query->andwhere('f.dateOperationFacture >= :dateFrom ');
            $query->setParameter('dateFrom', $dateFrom);
        }

        if ($dateTo) {
            $query->andwhere('f.dateOperationFacture <= :dateTo ');
            $query->setParameter('dateTo', $dateTo);
        }

        if ($produit) {
            $query->andwhere('p.id = :id ');
            $query->setParameter('id', $produit);
        }
        return $query->getQuery()->getResult();
    }


    public function getAllClientVenteByProduitResume($produit, $dateFrom, $dateTo)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('sum(a.quantiteAchat) as produit', 'c.nomClient')
            ->from ('StockBundle:Achat','a')
            ->innerJoin('a.facture', 'f')
            ->innerJoin('a.stock', 's')
            ->innerJoin('f.client', 'c')
            ->innerJoin('s.produit', 'p')
            ->where('f.statut = 1')
            ->groupBy('c.id')
            ->orderBy('c.id',"DESC")

        ;

        if ($dateFrom) {
            $query->andwhere('f.dateOperationFacture >= :dateFrom ');
            $query->setParameter('dateFrom', $dateFrom);
        }

        if ($dateTo) {
            $query->andwhere('f.dateOperationFacture <= :dateTo ');
            $query->setParameter('dateTo', $dateTo);
        }

        if ($produit) {
            $query->andwhere('p.id = :id ');
            $query->setParameter('id', $produit);
        }
        return $query->getQuery()->getResult();
    }
    public function getAllClientVenteResume($client, $dateFrom, $dateTo)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('sum(a.quantiteAchat) as produit', 'p.nomProduit')
            ->from ('StockBundle:Achat','a')
            ->innerJoin('a.facture', 'f')
            ->innerJoin('a.stock', 's')
            ->innerJoin('f.client', 'c')
            ->innerJoin('s.produit', 'p')
            ->where('f.statut = 1')
            ->groupBy('p.id')
            ->orderBy('p.id',"DESC")

        ;

        if ($dateFrom) {
            $query->andwhere('f.dateOperationFacture >= :dateFrom ');
            $query->setParameter('dateFrom', $dateFrom);
        }

        if ($dateTo) {
            $query->andwhere('f.dateOperationFacture <= :dateTo ');
            $query->setParameter('dateTo', $dateTo);
        }

        if ($client) {
            $query->andwhere('c.id = :id ');
            $query->setParameter('id', $client);
        }
        return $query->getQuery()->getResult();
    }

    public function getAllClientVenteNonValiderResume($client, $dateFrom, $dateTo)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('sum(a.quantiteAchat) as produit', 'p.nomProduit')
            ->from ('StockBundle:Achat','a')
            ->innerJoin('a.facture', 'f')
            ->innerJoin('a.stock', 's')
            ->innerJoin('f.client', 'c')
            ->innerJoin('s.produit', 'p')
            ->where('f.statut = 0')
            ->groupBy('p.id')
            ->orderBy('p.id',"DESC")

        ;

        if ($dateFrom) {
            $query->andwhere('f.dateOperationFacture >= :dateFrom ');
            $query->setParameter('dateFrom', $dateFrom);
        }

        if ($dateTo) {
            $query->andwhere('f.dateOperationFacture <= :dateTo ');
            $query->setParameter('dateTo', $dateTo);
        }

        if ($client) {
            $query->andwhere('c.id = :id ');
            $query->setParameter('id', $client);
        }
        return $query->getQuery()->getResult();
    }



    public function getAllVenteResumeByUser($dateFrom, $dateTo, $user)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('f')
            ->from ('StockBundle:Facture','f')
            ->innerJoin('f.user', 'u')
            ->where('f.statut = 1 ')
            ->orderBy('f.id',"DESC")

        ;

        if ($dateFrom) {
            $query->andwhere('f.dateOperationFacture >= :dateFrom ');
            $query->setParameter('dateFrom', $dateFrom);
        }

        if ($dateTo) {
            $query->andwhere('f.dateOperationFacture <= :dateTo ');
            $query->setParameter('dateTo', $dateTo);
        }
        if ($user) {
            $query->andwhere('u.id = :user');
            $query->setParameter('user', $user);
        }
        return $query->getQuery()->getResult();
    }

    public function getAllVenteProduitResumeByUser($produit, $dateFrom, $dateTo, $user)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('f.id', 'f.referenceFacture', 'f.dateFacture')
            ->from ('StockBundle:Achat','a')
            ->innerJoin('a.facture', 'f')
            ->innerJoin('a.stock', 's')
            ->innerJoin('f.user', 'u')
            ->innerJoin('s.produit', 'p')
            ->where('f.statut = 1')
            ->orderBy('f.id',"DESC")

        ;

        if ($dateFrom) {
            $query->andwhere('f.dateOperationFacture >= :dateFrom ');
            $query->setParameter('dateFrom', $dateFrom);
        }

        if ($dateTo) {
            $query->andwhere('f.dateOperationFacture <= :dateTo ');
            $query->setParameter('dateTo', $dateTo);
        }
        if ($user) {
            $query->andwhere('u.id = :user');
            $query->setParameter('user', $user);
        }
        if ($produit) {
            $query->andwhere('p.id = :id ');
            $query->setParameter('id', $produit);
        }
        return $query->getQuery()->getResult();
    }

    public function chiffreAffaire($dateFrom, $dateTo, $numCompte)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('o')
            ->from ('CompteBundle:Operation','o')
            ->where('o.compte = :numCompte')
            ->setParameter('numCompte', $numCompte)
            ->orderBy('o.id',"DESC")

        ;

        if ($dateFrom) {
            $query->andwhere('o.dateOperation >= :dateFrom ');
            $query->setParameter('dateFrom', $dateFrom);
        }

        if ($dateTo) {
            $query->andwhere('o.dateOperation <= :dateTo ');
            $query->setParameter('dateTo', $dateTo);
        }

        return $query->getQuery()->getResult();
    }

}
